--- SDL_render_gles.c	2012-05-23 17:07:14.431483827 +0300
+++ /home/pelya/src/endless_space/SDL-android/project/jni/sdl-1.3/src/render/opengles/SDL_render_gles.c	2012-05-23 17:20:18.467476658 +0300
@@ -91,8 +91,8 @@
     {
      "opengles",
      (SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC | SDL_RENDERER_TARGETTEXTURE),
-     1,
-     {SDL_PIXELFORMAT_ABGR8888},
+     5,
+     {SDL_PIXELFORMAT_ABGR8888,SDL_PIXELFORMAT_RGB565,SDL_PIXELFORMAT_RGBA5551,SDL_PIXELFORMAT_RGBA4444,SDL_PIXELFORMAT_RGB24},
      0,
      0}
 };
@@ -232,7 +232,7 @@
 }
 
 /* This is called if we need to invalidate all of the SDL OpenGL state */
-static void
+extern void
 GLES_ResetState(SDL_Renderer *renderer)
 {
     GLES_RenderData *data = (GLES_RenderData *) renderer->driverdata;
@@ -414,10 +414,9 @@
 }
 
 static int
-GLES_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+GLES_CreateTextureInternal(SDL_Renderer * renderer, SDL_Texture * texture, GLES_TextureData *data)
 {
     GLES_RenderData *renderdata = (GLES_RenderData *) renderer->driverdata;
-    GLES_TextureData *data;
     GLint internalFormat;
     GLenum format, type;
     int texture_w, texture_h;
@@ -432,25 +431,47 @@
         format = GL_RGBA;
         type = GL_UNSIGNED_BYTE;
         break;
+    case SDL_PIXELFORMAT_RGB565:
+        internalFormat = GL_RGB;
+        format = GL_RGB;
+        type = GL_UNSIGNED_SHORT_5_6_5;
+        break;
+    case SDL_PIXELFORMAT_RGBA5551:
+        internalFormat = GL_RGBA;
+        format = GL_RGBA;
+        type = GL_UNSIGNED_SHORT_5_5_5_1;
+        break;
+    case SDL_PIXELFORMAT_RGBA4444:
+        internalFormat = GL_RGBA;
+        format = GL_RGBA;
+        type = GL_UNSIGNED_SHORT_4_4_4_4;
+        break;
+    case SDL_PIXELFORMAT_RGB24:
+        internalFormat = GL_RGB;
+        format = GL_RGB;
+        type = GL_UNSIGNED_BYTE;
+        break;
     default:
         SDL_SetError("Texture format not supported");
         return -1;
     }
 
-    data = (GLES_TextureData *) SDL_calloc(1, sizeof(*data));
-    if (!data) {
-        SDL_OutOfMemory();
-        return -1;
-    }
-
-    if (texture->access == SDL_TEXTUREACCESS_STREAMING) {
-        data->pitch = texture->w * SDL_BYTESPERPIXEL(texture->format);
-        data->pixels = SDL_calloc(1, texture->h * data->pitch);
-        if (!data->pixels) {
+    if(data == NULL) {
+        data = (GLES_TextureData *) SDL_calloc(1, sizeof(*data));
+        if (!data) {
             SDL_OutOfMemory();
-            SDL_free(data);
             return -1;
         }
+
+        if (texture->access == SDL_TEXTUREACCESS_STREAMING) {
+            data->pitch = texture->w * SDL_BYTESPERPIXEL(texture->format);
+            data->pixels = SDL_calloc(1, texture->h * data->pitch);
+            if (!data->pixels) {
+                SDL_OutOfMemory();
+                SDL_free(data);
+                return -1;
+            }
+        }
     }
 
     texture->driverdata = data;
@@ -493,6 +514,18 @@
 }
 
 static int
+GLES_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+{
+    return GLES_CreateTextureInternal(renderer, texture, NULL);
+}
+
+extern int
+GLES_ReinitTextureAndroid(SDL_Renderer * renderer, SDL_Texture * texture, void * data)
+{
+    return GLES_CreateTextureInternal(renderer, texture, (GLES_TextureData *)data);
+}
+
+static int
 GLES_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
                    const SDL_Rect * rect, const void *pixels, int pitch)
 {
